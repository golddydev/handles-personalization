// REDEEMERS
const update_nft_redeemer_good = Redeemer::UPDATE_NFT_HANDLE { "xar12345" }

// DATUMS
const empty_datum = Datum { "" }

// VALIDATOR HASHES
const test_script_hash: ValidatorHash = ValidatorHash::new(#01234567890123456789012345678901234567890123456789000001)
const test_owner_hash: ValidatorHash = ValidatorHash::new(#01234567890123456789012345678901234567890123456789000002)

// TRANSACTION HASHES
const script_tx_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891234)
const owner_tx_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891235)
const tx_output_id: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891234)

// SIGNATURE HASHES
const test_signature_hash: PubKeyHash = PubKeyHash::new(#9876543210012345678901234567890123456789012345678901234567891234)

// INPUTS
const good_owner_input: TxInput = TxInput::new(TxOutputId::new(owner_tx_hash, 0),
    TxOutput::new(
        Address::new(Credential::new_validator(test_owner_hash), Option[StakingCredential]::None)
        , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("xar12345".encode_utf8())), 1)
        , OutputDatum::new_none()
    )
)
const good_ref_token_input: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0),
    TxOutput::new(
        Address::new(Credential::new_validator(test_script_hash), Option[StakingCredential]::None)
        , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_100 + ("xar12345".encode_utf8())), 1)
        , OutputDatum::new_none()
    )
)

// OUTPUTS
const good_owner_output: TxOutput = TxOutput::new(
    Address::new(Credential::new_validator(test_owner_hash), Option[StakingCredential]::None)
    , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("xar12345".encode_utf8())), 1)
    , OutputDatum::new_none()
)

const good_ref_token_output: TxOutput = TxOutput::new(
    Address::new(Credential::new_validator(test_script_hash), Option[StakingCredential]::None)
    , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_100 + ("xar12345".encode_utf8())), 1)
    , OutputDatum::new_none()
)

const bad_ref_token_output: TxOutput = TxOutput::new(
    Address::new(Credential::new_validator(ValidatorHash::new(#01234567890123456789012345678901234567890123456789000002)), Option[StakingCredential]::None)
    , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_100 + ("xar12345".encode_utf8())), 1)
    , OutputDatum::new_none()
)

// CONTEXTS
const empty_ctx: ScriptContext = ScriptContext::new_spending(Tx{}, TxOutputId{})

// ScriptContext wraps a Tx object:
// Tx::new(
//     inputs:      []TxInput,
//     ref_inputs:  []TxInput,
//     outputs:     []TxOutput,
//     fee:         Value,
//     minted:      Value,
//     dcerts:      []DCert,
//     withdrawals: Map[StakingCredential]Int,
//     time_range:  TimeRange,
//     signatories: []PubKeyHash,
//     redeemers:   Map[ScriptPurpose]AnyType,
//     datums:      Map[DatumHash]AnyType
// ) -> Tx

const ctx_good_default: ScriptContext = ScriptContext::new_spending(
    Tx::new(
        []TxInput{good_owner_input, good_ref_token_input},
        []TxInput{},
        []TxOutput{good_owner_output, good_ref_token_output},
        Value::lovelace(160000),
        Value::ZERO,
        []DCert{},
        Map[StakingCredential]Int{},
        TimeRange::from(Time::new(1001)),
        []PubKeyHash{test_signature_hash},
        Map[ScriptPurpose]Data{},
        Map[DatumHash]Data{}
    ),
    TxOutputId::new(tx_output_id, 0)
)

const ctx_bad_ref_token_output: ScriptContext = ScriptContext::new_spending(
    Tx::new(
        []TxInput{good_owner_input, good_ref_token_input},
        []TxInput{},
        []TxOutput{good_owner_output, bad_ref_token_output},
        Value::lovelace(160000),
        Value::ZERO,
        []DCert{},
        Map[StakingCredential]Int{},
        TimeRange::from(Time::new(1001)),
        []PubKeyHash{test_signature_hash},
        Map[ScriptPurpose]Data{},
        Map[DatumHash]Data{}
    ),
    TxOutputId::new(tx_output_id, 0)
)
