// STRINGS
const handle = "xar12345"
// REDEEMERS
const update_nft_redeemer_good = Redeemer::UPDATE_NFT_HANDLE { handle: handle, designer: #d8799fff }
const good_admin_redeemer = Redeemer::ADMIN_UPDATE

// DATUMS
const good_datum = Cip68Datum { 
    nft_attributes: Map[String]Data {
        "name": OutputDatum::new_inline(handle).data,
        "image": OutputDatum::new_inline("ipfs://image_cid").data,
        "mediaType": OutputDatum::new_inline("image/png").data,
        "og": OutputDatum::new_inline(0).data,
        "rarity": OutputDatum::new_inline("basic").data,
        "length": OutputDatum::new_inline(8).data,
        "character_type": OutputDatum::new_inline("characters,numbers").data,
        "numeric_modifier": OutputDatum::new_inline("").data,
        "og_number": OutputDatum::new_inline(0).data,
        "version": OutputDatum::new_inline(1).data
    }, 
    version: 1, 
    pz_data: Map[String]Data {
        "custom_image": OutputDatum::new_inline("ipfs://cid").data,
        "bg_image": OutputDatum::new_inline("ipfs://cid").data,
        "pfp_image": OutputDatum::new_inline("ipfs://cid").data,
        "designer": OutputDatum::new_inline("ipfs://zb2rheN3tw536wH89uccFxjC2A45x4fi52kr7aX1LjKiX31Ug").data,
        "socials": OutputDatum::new_inline("ipfs://cid").data,
        "vendor": OutputDatum::new_inline("ipfs://cid").data,
        "default": OutputDatum::new_inline(1).data,
        "holder": OutputDatum::new_inline("stake1...").data
    }
}

// HASHES
const admin_bytes = #01234567890123456789012345678901234567890123456789000007
const script_creds_bytes = #01234567890123456789012345678901234567890123456789000001
const owner_bytes = #9876543210012345678901234567890123456789012345678901234567891235
const script_hash: ValidatorHash = ValidatorHash::new(script_creds_bytes)
const treasury_bytes = #01234567890123456789012345678901234567890123456789000002
const ada_handles_bytes = #01234567890123456789012345678901234567890123456789000003
const pz_provider_bytes = #01234567890123456789012345678901234567890123456789000004

// TRANSACTION HASHES
const script_tx_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891234)
const owner_tx_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891235)
const handles_tx_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891236)
const tx_output_id: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891234)

// SIGNATURE HASHES
const owner_pubkey_hash: PubKeyHash = PubKeyHash::new(#9876543210012345678901234567890123456789012345678901234567891235)

// SETTINGS
const pz_settings = PzSettings {
    treasury_fee: 1000000,
    treasury_cred: treasury_bytes,
    pz_min_fee: 4000000,
    pz_providers: []ByteArray{ada_handles_bytes, pz_provider_bytes},
    valid_contracts: []ByteArray{script_creds_bytes},
    admin_creds: []ByteArray{admin_bytes},
    settings_cred: ada_handles_bytes
}
const pz_settings_new_contract = PzSettings {
    treasury_fee: 1000000,
    treasury_cred: treasury_bytes,
    pz_min_fee: 4000000,
    pz_providers: []ByteArray{ada_handles_bytes, pz_provider_bytes},
    valid_contracts: []ByteArray{admin_bytes},
    admin_creds: []ByteArray{},
    settings_cred: ada_handles_bytes
}

// INPUTS
const good_ref_token_input: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0), 
    TxOutput::new(
        Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
        , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_100 + (handle.encode_utf8())), 1)
        , OutputDatum::new_none()
    )
)
const bad_ref_token_input_name: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0), 
    TxOutput::new(
        Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
        , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_100 + ("xar12346".encode_utf8())), 1)
        , OutputDatum::new_none()
    )
)
const bad_ref_token_input_label: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, #000653b0 + ("xar12346".encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const bad_ref_token_input_creds: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(owner_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_100 + (handle.encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const bad_ref_token_input_policy: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(MintingPolicyHash::new(#f0ff48bbb7bbe9d59a40f1ce90e9e9d0ff5002ec48f232b49ca0fb9b), LBL_100 + (handle.encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const not_real_handle_input: TxInput = TxInput::new(TxOutputId::new(owner_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_pubkey(PubKeyHash::new(owner_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(MintingPolicyHash::new(#f0ff48bbb7bbe9d59a40f1ce90e9e9d0ff5002ec48f232b49ca0fb9b), LBL_222 + (handle.encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )

// REFERENCE INPUTS
const good_owner_input: TxInput = TxInput::new(TxOutputId::new(owner_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_pubkey(PubKeyHash::new(owner_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + (handle.encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const wrong_handle_name_input: TxInput = TxInput::new(TxOutputId::new(owner_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_pubkey(PubKeyHash::new(owner_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("xar12346".encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const wrong_handle_label_input: TxInput = TxInput::new(TxOutputId::new(owner_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_pubkey(PubKeyHash::new(owner_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, #000653b0 + (handle.encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const good_ref_input_bg: TxInput = TxInput::new(TxOutputId::new(handles_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(ada_handles_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("bg_policy_ids".encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const good_ref_input_bg_sub: TxInput = TxInput::new(TxOutputId::new(handles_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(pz_provider_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("partner@bg_policy_ids".encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const good_ref_input_pfp: TxInput = TxInput::new(TxOutputId::new(handles_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(ada_handles_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("pfp_policy_ids".encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const good_ref_input_pfp_sub: TxInput = TxInput::new(TxOutputId::new(handles_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(pz_provider_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("partner@pfp_policy_ids".encode_utf8())), 1)
            , OutputDatum::new_none()
        )
    )
const good_ref_input_pz: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(ada_handles_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("pz_settings".encode_utf8())), 1)
            , OutputDatum::new_inline(pz_settings)
        )
    )
const bad_ref_input_pz: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(pz_provider_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("pz_settings".encode_utf8())), 1)
            , OutputDatum::new_inline(pz_settings)
        )
    )
const good_ref_input_pz_new_contract: TxInput = TxInput::new(TxOutputId::new(script_tx_hash, 0),
        TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(ada_handles_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + ("pz_settings".encode_utf8())), 1)
            , OutputDatum::new_inline(pz_settings_new_contract)
        )
    )

// OUTPUTS
const good_owner_output: TxOutput = TxOutput::new(
            Address::new(Credential::new_pubkey(PubKeyHash::new(owner_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_222 + (handle.encode_utf8())), 1)
            , OutputDatum::new_none())
const good_ref_token_output: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_100 + (handle.encode_utf8())), 1)
            , OutputDatum::new_inline(good_datum))
const good_treasury_output: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(treasury_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000)
            , OutputDatum::new_inline(handle.encode_utf8()))
const bad_treasury_output_datum: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(treasury_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000)
            , OutputDatum::new_inline("xar12346".encode_utf8()))
const good_provider_output: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(pz_provider_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000)
            , OutputDatum::new_inline(handle.encode_utf8()))
const bad_provider_output_datum: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(pz_provider_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000)
            , OutputDatum::new_inline("xar12346".encode_utf8()))
const bad_output_fee: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(treasury_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(100000)
            , OutputDatum::new_inline(handle.encode_utf8()))
const bad_provider_output_fee: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(pz_provider_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(100000)
            , OutputDatum::new_inline(handle.encode_utf8()))
const bad_output_address: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(#01234567890123456789012345678901234567890123456789000009)), Option[StakingCredential]::None)
            , Value::lovelace(10000000)
            , OutputDatum::new_inline(handle.encode_utf8()))
const bad_ref_token_output: TxOutput = TxOutput::new(
            Address::new(Credential::new_validator(ValidatorHash::new(owner_bytes)), Option[StakingCredential]::None)
            , Value::lovelace(10000000) + Value::new(AssetClass::new(HANDLE_POLICY, LBL_100 + (handle.encode_utf8())), 1)
            , OutputDatum::new_none())

// CONTEXTS

// ScriptContext wraps a Tx object:
// Tx::new(
//     inputs:      []TxInput,
//     ref_inputs:  []TxInput,
//     outputs:     []TxOutput,
//     fee:         Value,
//     minted:      Value,
//     dcerts:      []DCert,
//     withdrawals: Map[StakingCredential]Int,
//     time_range:  TimeRange,
//     signatories: []PubKeyHash,
//     redeemers:   Map[ScriptPurpose]AnyType,
//     datums:      Map[DatumHash]AnyType
// ) -> Tx

func buildScriptContext(inputs: []TxInput, ref_inputs: []TxInput, outputs: []TxOutput, signers: []PubKeyHash = []PubKeyHash{owner_pubkey_hash}) -> ScriptContext {
    ScriptContext::new_spending(
        Tx::new(
            inputs,
            ref_inputs,
            outputs,
            Value::lovelace(160000),
            Value::ZERO,
            []DCert{},
            Map[StakingCredential]Int{},
            TimeRange::from(Time::new(1001)),
            signers,
            Map[ScriptPurpose]Data{},
            Map[DatumHash]Data{}
        ),
        TxOutputId::new(tx_output_id, 0)
    )
}
const good_default: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const good_ref_sub: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg_sub, good_ref_input_pfp_sub, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const bad_ref_token_wrong_output: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{bad_ref_token_output, good_treasury_output, good_provider_output}
)
const bad_ref_token_name: ScriptContext = buildScriptContext(
    []TxInput{bad_ref_token_input_name},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const bad_ref_token_label: ScriptContext = buildScriptContext(
    []TxInput{bad_ref_token_input_label},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const bad_ref_token_creds: ScriptContext = buildScriptContext(
    []TxInput{bad_ref_token_input_creds},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const bad_ref_token_policy: ScriptContext = buildScriptContext(
    []TxInput{bad_ref_token_input_policy},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const missing_bg_ref_input: ScriptContext = buildScriptContext(
    []TxInput{bad_ref_token_input_policy},
    []TxInput{good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const missing_pfp_ref_input: ScriptContext = buildScriptContext(
    []TxInput{bad_ref_token_input_policy},
    []TxInput{good_ref_input_bg, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const missing_pz_ref_input: ScriptContext = buildScriptContext(
    []TxInput{bad_ref_token_input_policy},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const handle_missing_from_inputs: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const not_a_real_handle: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, not_real_handle_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const wrong_handle_name: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, wrong_handle_name_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const wrong_handle_label: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, wrong_handle_label_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const provider_fee_wrong: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, bad_provider_output_fee}
)
const provider_address_wrong: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, bad_output_address}
)
const provider_datum_wrong: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, bad_provider_output_datum}
)
const treasury_fee_wrong: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, bad_output_fee, good_provider_output}
)
const treasury_address_wrong: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, bad_output_address, good_provider_output}
)
const treasury_datum_wrong: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, bad_treasury_output_datum, good_provider_output}
)
const pz_settings_wrong_address: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, bad_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const wrong_contract_address: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz_new_contract, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output}
)
const good_admin_ctx: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output},
    []PubKeyHash{PubKeyHash::new(admin_bytes)}
)
const wrong_admin_ctx: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output},
    []PubKeyHash{PubKeyHash::new(#01234567890123456789012345678901234567890123456789000008)}
)
const no_admin_signers_ctx: ScriptContext = buildScriptContext(
    []TxInput{good_ref_token_input},
    []TxInput{good_ref_input_bg, good_ref_input_pfp, good_ref_input_pz, good_owner_input},
    []TxOutput{good_ref_token_output, good_treasury_output, good_provider_output},
    []PubKeyHash{}
)